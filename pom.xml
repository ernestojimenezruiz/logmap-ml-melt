<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>uk.ac.ox-city</groupId>
  <artifactId>logmap-ml-melt</artifactId>
  <version>oaei-2021</version>
  <name>LogMap-ML</name>
  <description>LogMap-ML interface for the MELT platform</description>
  
  
  <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        
        <!-- mandatory: this class has to implement IOntologyMatchingToolBridge or subclasses-->
        <!-- Select one -->
        <oaei.mainClass>uk.ac.city.logmap.melt.LogMap_MELT</oaei.mainClass>  <!--  Extends MatcherURL -->
        <!--oaei.mainClass>uk.ac.city.logmap.melt.LogMap_MELT_OWLAPI</oaei.mainClass-->  <!-- Extends -MatcherYAAAOwlApi -->
        
        <maven.deploy.skip>true</maven.deploy.skip><!-- needed to call mvn deploy without having a distributionManagement -->
        <!-- <matching.version>3.0</matching.version>-->
        <matching.version>master-SNAPSHOT</matching.version> <!-- version for all matching related packages -->
        <matching.versionA>3.0</matching.versionA>
        <matching.groupId>com.github.dwslab.melt</matching.groupId>
        
        <!--matching.groupId>de.uni-mannheim.informatik.dws.melt</matching.groupId-->
    </properties>
    
    
    <repositories>
	    <repository>
	        <id>jitpack.io</id>
	        <url>https://jitpack.io</url>
	    </repository>
	</repositories>
    
    
    
    <dependencies>
    
    	<!-- LogMap DEPENDENCY -->
  		<dependency>
    		<groupId>uk.ox.logmap</groupId>
    		<artifactId>logmap-matcher</artifactId>
    		<version>4.0</version>
  		</dependency>
    
    	
    	<dependency>
            <groupId>${matching.groupId}</groupId>
            <artifactId>matching-base</artifactId>
            <version>${matching.version}</version>
        </dependency>
    
        <!-- dependency for OWLAPI matchers - for other matchers you can replace it with artifactId: matching-base
        <dependency>
            <groupId>${matching.groupId}</groupId>
            <artifactId>matching-owlapi</artifactId>
            <version>${matching.version}</version>
        </dependency-->
        

        <!-- This dependency is necessary for web submission. It contains the server wrapper. -->
        <dependency>
            <groupId>${matching.groupId}</groupId>
            <artifactId>receiver-http</artifactId>
            <version>${matching.version}</version>
        </dependency>

        <dependency>
            <groupId>${matching.groupId}</groupId>
            <artifactId>matching-eval</artifactId>
            <version>${matching.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.github.docker-java</groupId>
            <artifactId>docker-java-core</artifactId>
            <version>3.2.11</version><!--maybe update version-->
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.docker-java</groupId>
            <artifactId>docker-java-transport-httpclient5</artifactId>
            <version>3.2.11</version><!--maybe update version-->
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.31</version>
        </dependency>
        <dependency>
    		<groupId>org.slf4j</groupId>
    		<artifactId>slf4j-api</artifactId>
    		<version>1.7.31</version>
		</dependency>

    </dependencies>
    
     <build>
        <plugins>
            <!-- the following plugin will generate a docker image and save it into the target folder -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.36.0</version>
                <configuration>
                    <!-- further machine configuration options: https://dmp.fabric8.io/#docker-machine
                         Use the following line in case you have installed docker on windows or mac
                    <machine><name>default</name></machine>
                    -->
                    <images>
                        <image>
                            <name>%a-%v-web</name>
                            <build>
                                <from>python:3.8.10-alpine3.12</from><!--change it to a docker base image you want - this is just a small image which contains python 3.8.10-->
                                <runCmds>
                                    <run>pip install rdflib</run><!-- install all your python dependencies here -->
                                    <run>apk add --update openjdk8-jre</run><!-- install java because we need it -->
                                </runCmds>
                                <assembly><descriptorRef>web</descriptorRef></assembly>
                                <cmd><shell>java -cp "${project.build.finalName}.${project.packaging}:lib/*" de.uni_mannheim.informatik.dws.melt.receiver_http.Main</shell></cmd>
                                <workdir>/maven</workdir>
                                <ports><port>8080</port></ports><!--port exposure to specify on which port the server runs -->
                            </build>
                        </image>
                    </images>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
                        <artifactId>matching-assembly</artifactId>
                        <version>${matching.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                            <goal>save</goal>
                        </goals>
                        <!--execute build and save when calling "mvn install" -->
                        <phase>install</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    
  
  
</project>